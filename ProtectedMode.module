<?php

/**
 * ProcessWire module for putting your site into protected mode so that users must be logged in to access the front-end of the site.
 * by Adrian Jones
 *
 * Put your site in protected mode so that users must be logged in to access the front-end of the site.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 * Big thanks to Horst Nogajski (@horst-n) for significant code contributions related to the maintenance mode option including 503 / Retry-After headers.
 *
 */

class ProtectedMode extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Protected Mode',
            'summary' => 'Allows you to put your site into protected mode so that users must be logged in to access the front-end of the site.',
            'author' => 'Adrian Jones',
            'href' => 'http://modules.processwire.com/modules/protected-mode/',
            'version' => '1.1.0',
            'permanent' => false,
            'autoload' => true,
            'singular' => true,
            'icon' => 'key'
        );
    }


    protected $isAllowedUser = false;
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "protectedMode" => 0,
                "roles" => array(),
                "send503header" => 0,
                "retryAfter_inputdate" => "Y-m-d",
                "retryAfter_inputtime" => "H:i",
                "retryAfter_autoIncrease" => 60,
                "retryAfter" => time(),
                "message" => "This site is currently in protected mode. You must log in to view the site.",
                "prohibitedMessage" => "Sorry, you do not have permission to view the site in protected mode.",
                "usernamePlaceholder" => "Username",
                "passwordPlaceholder" => "Password",
                "loginButtonText" => "Login",
                "logincss" => "
.protected-mode-container {
    width: 400px;
    max-width: calc(100vw - 20px);
    height: 150px;
    margin: auto;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
}

p, legend {
    font-family: Arial, Helvetica, sans-serif;
    display: block;
    width: 100%;
    margin-bottom: 1rem;
    line-height: 1.4;
    color: #6F6F6F;
}

button {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 100%;
    padding: 0.5em 1em;
    background-color: #006DD3;
    color:#fff;
    text-decoration: none;
    border: 0 rgba(0,0,0,0);
    border-radius: 2px;
}
button:hover,
button:focus {
    background-color: #007DD2;
}
button:focus {
    outline: 0;
}

input[type='text'],
input[type='password'] {
    font-size: 100%;
    padding: 0.5rem;
    display: inline-block;
    border: 1px solid #ccc;
    box-shadow: inset 0 1px 3px #ddd;
    border-radius: 4px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
"
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        $this->isAllowedUser = $this->isAllowedUser();

        if($this->isAllowedUser || !$this->data['protectedMode']) return; //if allowed logged in user or protectedModed not checked, escape now
        $this->addHookAfter('Page::render', $this, 'protectedCheck', array('priority'=>1000));
    }


    /**
     * Checks if we're in protected mode shows login form if necessary
     *
     * @param HookEvent $event
     */
    protected function protectedCheck(HookEvent $event) {

        if($this->wire('page')->url != $this->wire('config')->urls->admin."login/") {

            if($this->wire('languages')) {
                $userLanguage = $this->wire('user')->language;
                $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
            }
            else {
                $lang = '';
            }

            if($this->wire('input')->post->username && $this->wire('input')->post->pass) {
                $username = $this->wire('sanitizer')->username($this->wire('input')->post->username);
                $user = $this->wire('session')->login($username, $this->wire('input')->post->pass);
                if(!$user) $this->wire('session')->loginFailed = true;
                $this->wire('session')->redirect(htmlspecialchars($_SERVER['REQUEST_URI']));
            }
            else {
                if($this->wire('session')->loginFailed) {
                    $failedMessage = __("Login Failed, please try again!");
                }
                elseif($this->wire('user')->isLoggedin() && !$this->isAllowedUser) {
                    $failedMessage = $this->data['prohibitedMessage'];
                }
                else {
                    $failedMessage = null;
                }

                $timestamp = (int) $this->data['retryAfter'];
                $timestamp = time() >= $timestamp ? time() + 300 + intval(60 * (int)$this->data['retryAfter_autoIncrease']) : $timestamp;  // fallback if we already have reached the estimated time
                $retryAfterString = date($this->data['retryAfter_inputdate'] . ' @ ' . $this->data['retryAfter_inputtime'], $timestamp);   // make a locale Date / Time for displaying to human visitors
                $message = $this->wire('session')->loginFailed || !$this->isAllowedUser ? "<p>" . $failedMessage . "</p>" : "";
                if(!$failedMessage) $message .= str_replace('{{RETRYAFTER}}', $retryAfterString, ($this->data['message'.$lang] ? $this->data['message'.$lang] : $this->data['message'])); // add the RetryAfter-Time to the user message

                if ($this->data['send503header'] && !headers_sent()) {
                    header('HTTP/1.1 503 Service Temporarily Unavailable');                 // tell the Searchbots that we are in maintenance mode
                    header('Retry-After: ' . gmdate('D, j M Y H:i:s \G\M\T', $timestamp));  // make a GMT Date to tell the Searchbots when they may come back again
                }

                if($this->wire('session')->loginFailed) $this->wire('session')->loginFailed = false;

                $event->return = "
                <!DOCTYPE html>
                    <head>
                        <meta charset='utf-8' />
                        <meta name='viewport' content='width=device-width, initial-scale=1'>
                        <title>protected :: ".$this->wire('page')->title."</title>
                        <style>
                            ".$this->data['logincss']."
                        </style>
                    </head>
                    <body>
                        <div class='protected-mode-container'>
                            <form class='protectedModeForm' action='".htmlspecialchars($_SERVER['REQUEST_URI'])."' method='post'>
                                    <legend>{$message}</legend>
                                    <p>
                                        <input type='text' name='username' placeholder='".($this->data['usernamePlaceholder'.$lang] ? $this->data['usernamePlaceholder'.$lang] : $this->data['usernamePlaceholder'])."'>
                                        <input type='password' name='pass' placeholder='".($this->data['passwordPlaceholder'.$lang] ? $this->data['passwordPlaceholder'.$lang] : $this->data['passwordPlaceholder'])."'>
                                    <p>
                                    <p>
                                        <button type='submit' name='login'>".($this->data['loginButtonText'.$lang] ? $this->data['loginButtonText'.$lang] : $this->data['loginButtonText'])."</button>
                                    </p>
                            </form>
                        </div>
                    </body>
                </html>
                ";
            }
        }
    }


    private function isAllowedUser() {
        if($this->wire('user')->isSuperuser()) return true;
        if(!$this->wire('user')->isLoggedin()) return false;
        if(count($this->data['roles']) && !$this->wire('user')->roles->has("name=".implode("|",$this->data['roles']))) {
            return false;
        }
        else {
            return true;
        }
    }


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = $this->wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'instructions');
        $f->label = __('Instructions');
        $f->value = "
        <p>In protected mode, the front-end of this web site will not be accessible unless the user is logged in.</p>
        <p>If you want non-admin visitors to view the site you should create a new generic user with only the guest role and provide them with those login details.</p>
        <p>To keep the Processwire admin interface and URL hidden from the user, this module uses its own simple login form.</p>
        ";
        $wrapper->add($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'protectedMode');
        $f->label = __('Protected / Maintenance Mode');
        $f->description = __('If enabled, only logged in users will be able to view the front-end of the site.');
        $f->attr('checked', $data['protectedMode'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = $this->wire('modules')->get("InputfieldAsmSelect");
        $f->name = 'roles';
        $f->label = 'Allowed Roles';
        $f->showIf = "page_protected=1";
        $f->description = __("To limit access to specific roles, select them here.\nTo allow all roles, leave none selected.");
        $f->notes = __("NB The users with these roles still need to log in to view the page.\nThis allows you to completely block the unselected roles from viewing the page, even if they are logged in.");
        foreach($this->wire('roles') as $role) {
            $f->addOption($role->name, $role->name);
            if(isset($this->data['roles']) && in_array($role->name, $this->data['roles'])) $f->attr('value', $role->name);
        }
        $f->setAsmSelectOption('sortable', false);
        $f->showIf = "protectedMode=1";
        $wrapper->append($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'send503header');
        $f->label = __('Send 503 / Retry-After headers');
        $f->description = __('The 503 (Service Temporarily Unavailable) header is highly recommended if this is temporary protection / maintenance of a normally publicly accessible site.');
        $f->showIf = "protectedMode=1";
        $f->attr('checked', $data['send503header'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = $this->wire('modules')->get("InputfieldDatetime");
        $f->attr('name', 'retryAfter');
        $f->label = __('Estimated end of maintenance');
        $f->description = __('This will be used to populate the "Retry-After" header.');
        $f->attr('value', 1===(int)$data['protectedMode'] && $data['retryAfter'] ? $data['retryAfter'] : time());
        $f->dateInputFormat = $data['retryAfter_inputdate'];
        $f->timeInputFormat = $data['retryAfter_inputtime'];
        $f->datepicker = 1;
        $f->defaultToday = 1;
        $f->showIf = "protectedMode=1, send503header=1";
        $f->requiredIf = "send503header=1";
        $wrapper->add($f);

        $fieldset = $this->wire('modules')->get('InputfieldFieldset');
        $fieldset->label = __('Advanced Configuration');
        $fieldset->showIf = "protectedMode=1";
        $fieldset->attr('name', '_advanced_configuration');
        $fieldset->collapsed = Inputfield::collapsedYes;

            $f = $this->wire('modules')->get("InputfieldText");
            $f->attr('name', 'retryAfter_inputdate');
            $f->label = __('Inputformat for Date in the DateTime-field');
            $f->description = __('Valid are all options from PHP date() function, for example m-d-Y');
            $f->value = $data['retryAfter_inputdate'];
            $f->columnWidth = 30;
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldText");
            $f->attr('name', 'retryAfter_inputtime');
            $f->label = __('Inputformat for Time in the DateTime-field');
            $f->description = __('Valid are all options from PHP date() function, for example H:i');
            $f->value = $data['retryAfter_inputtime'];
            $f->columnWidth = 30;
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldInteger");
            $f->attr('name', 'retryAfter_autoIncrease');
            $f->label = __('Auto Increase Value');
            $f->description = __('If the estimated time for maintenance is reached, but site is still in Maintenance Mode, add this amount of minutes to the current time.');
            $f->value = $data['retryAfter_autoIncrease'];
            $f->columnWidth = 40;
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldTextarea");
            $f->attr('name', 'message');
            $f->label = __('Login Message');
            $f->useLanguages = true;
            $f->description = __('This message will be displayed to users when they try to view the site.');
            $f->notes = __('If using this as a maintenance mode tool, you may want something like this in your message: "This site is in maintenance mode! Estimated time to finish maintenance is: {{RETRYAFTER}}<br />But if you have an account you may log in to the site anyways."');
            $f->value = $data['message'];
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldTextarea");
            $f->attr('name', 'prohibitedMessage');
            $f->label = __('Prohibited Message');
            $f->useLanguages = true;
            $f->description = __('This message will be displayed to users if their role is not allowed.');
            $f->value = $data['prohibitedMessage'];
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldText");
            $f->attr('name', 'usernamePlaceholder');
            $f->label = __('Username Placeholder');
            $f->useLanguages = true;
            $f->description = __('By default this will be "Username".');
            $f->value = $data['usernamePlaceholder'];
            $f->columnWidth = 33;
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldText");
            $f->attr('name', 'passwordPlaceholder');
            $f->label = __('Password Placeholder');
            $f->useLanguages = true;
            $f->description = __('By default this will be "Password".');
            $f->value = $data['passwordPlaceholder'];
            $f->columnWidth = 34;
            $fieldset->add($f);

            $f = $this->wire('modules')->get("InputfieldText");
            $f->attr('name', 'loginButtonText');
            $f->label = __('Login Button Text');
            $f->useLanguages = true;
            $f->description = __('By default this will be "Login".');
            $f->value = $data['loginButtonText'];
            $f->columnWidth = 33;
            $fieldset->add($f);

            $loginCss = trim($data['logincss']);
            if (empty($loginCss)) {
                $a = self::getDefaultData();
                $loginCss = $a['logincss'];
            }
            $f = $this->wire('modules')->get("InputfieldTextarea");
            $f->attr('name', 'logincss');
            $f->label = __('CSS');
            $f->description = __("You can change the style of the login form here.");
            $f->value = $loginCss;
            $fieldset->add($f);

        $wrapper->add($fieldset);

        return $wrapper;
    }

}
