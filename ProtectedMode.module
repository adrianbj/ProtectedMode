<?php

/**
 * ProcessWire module for putting your site into protected mode so that users must be logged in to access the front-end of the site.
 * by Adrian Jones
 *
 * Put your site in protected mode so that users must be logged in to access the front-end of the site.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProtectedMode extends WireData implements Module, ConfigurableModule {

	/**
	 * Basic information about module
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Protected Mode',
			'summary' => 'Allows you to put your site into protected mode so that users must be logged in to access the front-end of the site.',
			'href' => 'http://modules.processwire.com/modules/protected-mode/',
			'version' => 7,
			'permanent' => false,
			'autoload' => true,
			'singular' => true,
		);
	}


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "protectedMode" => 0,
                "message" => "This site is currently in protected mode. You must log in to view the site.",
                "logincss" => "
.container {
    margin: 20px;
}

legend {
    font-family: Arial, Helvetica, sans-serif;
    display: block;
    width: 100%;
    margin-bottom: 1rem;
    color: #6F6F6F;
}

button {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 100%;
    padding: 0.5em 1em;
    background-color: #006DD3;
    color:#fff;
    text-decoration: none;
    border: 0 rgba(0,0,0,0);
    border-radius: 2px;
}
button:hover,
button:focus {
    background-color: #007DD2;
}
button:focus {
    outline: 0;
}

input[type='text'],
input[type='password'] {
    font-size: 100%;
    padding: 0.5rem;
    display: inline-block;
    border: 1px solid #ccc;
    box-shadow: inset 0 1px 3px #ddd;
    border-radius: 4px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
                "
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


	/**
	 * Initialize the module and setup hooks
	 */
	public function init() {
		if($this->user->isLoggedin() || !$this->data['protectedMode']) return; //if logged in or protectedModed not checked, escape now
		$this->addHookAfter('Page::render', $this, 'protectedCheck');
	}


	/**
	 * Checks if we're in protected mode shows login form if necessary
	 *
	 * @param HookEvent $event
	 */
	public function protectedCheck(HookEvent $event) {

		if($this->page->url != $this->config->urls->admin."login/")	{

            if($this->input->post->username && $this->input->post->pass) {
                $username = $this->sanitizer->username($this->input->post->username);
                $this->session->login($username, $this->input->post->pass);
                $this->session->redirect($this->page->url);
            }
            else{
                $event->return = "
                <!DOCTYPE html>
                    <head>
                        <meta charset='utf-8' />
                        <style>
                            {$this->data['logincss']}
                        </style>
                    </head>
                    <body>
                        <div class='container'>
                            <form class='protectedModeForm' action='./' method='post'>
                                    <legend>{$this->data['message']}</legend>
                                    <input type='text' name='username' placeholder='Username'>
                                    <input type='password' name='pass' placeholder='Password'>
                                    <button type='submit' name='login'>Login</button>
                            </form>
                        </div>
                    </body>
                </html>
                ";
            }
        }
	}


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'instructions');
        $f->label = __('Instructions');
        $f->value = "
        <p>In protected mode, the front-end of this web site will not be accessible unless the user is logged in.</p>
        <p>If you want non-admin visitors to view the site you should create a new generic user with only the guest role and provide them with those login details.</p>
        <p>To keep the Processwire admin interface and URL hidden from the user, this module uses its own simple login form.</p>
        ";
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'protectedMode');
        $f->label = __('Protected Mode');
        $f->description = __('If enabled, only logged in users will be able to view the front-end of the site.');
        $f->attr('checked', $data['protectedMode'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'message');
        $f->label = __('Message');
        $f->description = __('This message will be displayed to users when they try to view the site.');
        $f->value = $data['message'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'logincss');
        $f->label = __('CSS');
        $f->description = __("You can change the style of the login form here.");
        $f->value = $data['logincss'];
        $wrapper->add($f);

        return $wrapper;
    }

}
